effect Pick : float -> bool

(* Picks uniformly from given list of events. *)
let rec uniform_pick = function
  | [x] -> x
  | x :: xs ->
      let n = length xs + 1 in
      let p = 1.0 /. float_of_int n in
      if perform (Pick p) then x else uniform_pick xs
;;

let vrzi_kocko () = uniform_pick [1.; 2.; 3.; 4.; 5.; 6.]

let rec distribution_pick l =
  let rec pick_aux acc = function
  | [(x, _)] -> x
  | (x, p)::xs ->
    let adjusted_p = (p/.(1. -. acc)) in
    if perform (Pick adjusted_p) then x else pick_aux (acc +. p) xs
  in
  pick_aux 0. l
;;

(* Combine two outcome distributions where the first outcome distribution is
   chosen with the probability p and the second with probability 1-p. *)

let combine p dist1 dist2 =
  let scale p dist = map (fun (x, q) -> (x, p *. q)) dist in
  let rec add (x, p) = function
    | [] -> [(x, p)]
    | (y, q) :: dist ->
      if x = y then (x, p +. q) :: dist else (y, q) :: add (x, p) dist
  in
  let dist1 = scale p dist1 in
  let dist2 = scale (1.0 -. p) dist2 in
  fold_right add dist1 dist2
;;


let _ =
  handle
    vrzi_kocko () +. vrzi_kocko ()
  with
  | v -> v
      (* Combine possible distributions. *)
  | effect (Pick p) k -> p *. (k true) +. (1.0 -. p) *. (k false)
;;
